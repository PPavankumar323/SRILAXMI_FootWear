import { supabase } from './supabase.js';

export const state = {
  products: [],
  cart: [],
  wishlist: [],
  addresses: [],
  currentUser: null,
  userProfile: null,
  filters: {
    category: null,
    brand: [],
    gender: [],
    color: [],
    priceMin: 0,
    priceMax: 10000,
    size: []
  }
};

// --- USER & PROFILE ---

export async function fetchUserProfile() {
  if (!state.currentUser) return;
  const { data, error } = await supabase
    .from('profiles')
    .select('full_name, phone, role')
    .eq('id', state.currentUser.id)
    .single();

  if (error) {
    console.error('Error fetching user profile:', error.message);
  } else {
    state.userProfile = data;
  }
}

// --- CART & WISHLIST ---

async function syncLocalDataToDb() {
  const user = state.currentUser;
  if (!user) return;

  const localCart = JSON.parse(localStorage.getItem('cart') || '[]');
  if (localCart.length > 0) {
    const cartItemsToSync = localCart.map(item => ({
      user_id: user.id,
      product_id: item.product.id,
      quantity: item.quantity,
      size: item.size
    }));
    await supabase.from('cart_items').upsert(cartItemsToSync, { onConflict: 'user_id, product_id, size' });
    localStorage.removeItem('cart');
  }

  const localWishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
  if (localWishlist.length > 0) {
    const wishlistItemsToSync = localWishlist.map(product => ({
      user_id: user.id,
      product_id: product.id
    }));
    await supabase.from('wishlist_items').upsert(wishlistItemsToSync, { onConflict: 'user_id, product_id' });
    localStorage.removeItem('wishlist');
  }
}

export async function fetchUserCart() {
  const user = state.currentUser;
  if (!user) {
    state.cart = JSON.parse(localStorage.getItem('cart') || '[]');
    return;
  }

  const { data, error } = await supabase
    .from('cart_items')
    .select(`quantity, size, products (*, categories (name), brands (name))`)
    .eq('user_id', user.id);

  if (error) {
    console.error('Error fetching cart:', error);
    state.cart = [];
  } else {
    state.cart = data.map(item => ({
      product: { ...item.products, category: item.products.categories.name, brand: item.products.brands.name },
      quantity: item.quantity,
      size: item.size
    }));
  }
}

export async function fetchUserWishlist() {
  const user = state.currentUser;
  if (!user) {
    state.wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]');
    return;
  }
  
  const { data, error } = await supabase
    .from('wishlist_items')
    .select(`products (*, categories (name), brands (name))`)
    .eq('user_id', user.id);

  if (error) {
    console.error('Error fetching wishlist:', error);
    state.wishlist = [];
  } else {
    state.wishlist = data.map(item => ({ ...item.products, category: item.products.categories.name, brand: item.products.brands.name }));
  }
}

export async function addToCart(product, quantity = 1, size = null) {
  if (!product) return;
  const user = state.currentUser;

  if (user) {
    const { data: existingItem } = await supabase
      .from('cart_items').select('id, quantity').eq('user_id', user.id).eq('product_id', product.id).eq('size', size).maybeSingle();

    if (existingItem) {
      await supabase.from('cart_items').update({ quantity: existingItem.quantity + quantity }).eq('id', existingItem.id);
    } else {
      await supabase.from('cart_items').insert({ user_id: user.id, product_id: product.id, quantity, size });
    }
  } else {
    const existingItem = state.cart.find(item => item.product.id === product.id && item.size === size);
    if (existingItem) existingItem.quantity += quantity;
    else state.cart.push({ product, quantity, size });
    localStorage.setItem('cart', JSON.stringify(state.cart));
  }
  await fetchUserCart();
}

export async function removeFromCart(productId, size) {
  const user = state.currentUser;
  if (user) {
    await supabase.from('cart_items').delete().eq('user_id', user.id).eq('product_id', productId).eq('size', size);
  } else {
    state.cart = state.cart.filter(item => !(item.product.id === productId && item.size === size));
    localStorage.setItem('cart', JSON.stringify(state.cart));
  }
  await fetchUserCart();
}

export async function updateCartQuantity(productId, size, quantity) {
  const user = state.currentUser;
  if (quantity <= 0) {
    await removeFromCart(productId, size);
    return;
  }

  if (user) {
    await supabase.from('cart_items').update({ quantity }).eq('user_id', user.id).eq('product_id', productId).eq('size', size);
  } else {
    const item = state.cart.find(item => item.product.id === productId && item.size === size);
    if (item) {
      item.quantity = quantity;
      localStorage.setItem('cart', JSON.stringify(state.cart));
    }
  }
  await fetchUserCart();
}

export async function clearCart() {
  const user = state.currentUser;
  if (user) await supabase.from('cart_items').delete().eq('user_id', user.id);
  else localStorage.removeItem('cart');
  state.cart = [];
}

export async function toggleWishlist(productId) {
  const product = state.products.find(p => p.id === productId);
  if (!product) return;

  const user = state.currentUser;
  const isCurrentlyInWishlist = isInWishlist(productId);

  if (user) {
    if (isCurrentlyInWishlist) await supabase.from('wishlist_items').delete().eq('user_id', user.id).eq('product_id', productId);
    else await supabase.from('wishlist_items').insert({ user_id: user.id, product_id: productId });
  } else {
    if (isCurrentlyInWishlist) state.wishlist = state.wishlist.filter(item => item.id !== productId);
    else state.wishlist.push(product);
    localStorage.setItem('wishlist', JSON.stringify(state.wishlist));
  }
  
  await fetchUserWishlist();
  return !isCurrentlyInWishlist;
}

export function isInWishlist(productId) { return state.wishlist.some(item => item.id === productId); }
export function getCartTotal() { return state.cart.reduce((total, item) => total + (item.product.price * item.quantity), 0); }
export function getCartCount() { return state.cart.reduce((count, item) => count + item.quantity, 0); }

// --- ORDERS ---

export async function placeOrder(orderDetails) {
  const user = state.currentUser;
  if (!user || state.cart.length === 0) throw new Error('User not logged in or cart is empty.');

  const total = getCartTotal();
  const shipping = total > 999 ? 0 : 50;
  const finalTotal = total + shipping;

  const { data: orderData, error: orderError } = await supabase.from('orders').insert({
    user_id: user.id,
    total_amount: finalTotal,
    status: 'Processing',
    shipping_address: orderDetails.address,
  }).select().single();

  if (orderError) throw new Error('Could not create order.');

  const orderItems = state.cart.map(item => ({
    order_id: orderData.id,
    product_id: item.product.id,
    quantity: item.quantity,
    price: item.product.price,
    size: item.size,
  }));

  const { error: itemsError } = await supabase.from('order_items').insert(orderItems);
  if (itemsError) {
    await supabase.from('orders').delete().eq('id', orderData.id);
    throw new Error('Could not save order items.');
  }

  await clearCart();
  return orderData;
}

// --- ADDRESSES ---

export async function fetchUserAddresses() {
  if (!state.currentUser) {
    state.addresses = [];
    return;
  }
  const { data, error } = await supabase.from('addresses').select('*').eq('user_id', state.currentUser.id);
  if (error) console.error('Error fetching addresses:', error);
  else state.addresses = data || [];
}

export async function addAddress(addressData) {
  if (!state.currentUser) throw new Error('User not logged in.');
  const { data, error } = await supabase.from('addresses').insert({ ...addressData, user_id: state.currentUser.id }).select().single();
  if (error) throw error;
  await fetchUserAddresses();
  return data;
}

export async function updateAddress(addressId, addressData) {
  if (!state.currentUser) throw new Error('User not logged in.');
  const { data, error } = await supabase.from('addresses').update(addressData).eq('id', addressId).select().single();
  if (error) throw error;
  await fetchUserAddresses();
  return data;
}

export async function deleteAddress(addressId) {
  if (!state.currentUser) throw new Error('User not logged in.');
  const { error } = await supabase.from('addresses').delete().eq('id', addressId);
  if (error) throw error;
  await fetchUserAddresses();
}

// --- ADMIN FUNCTIONS ---

export async function addProduct(productData) {
  const { data, error } = await supabase.from('products').insert(productData).select().single();
  if (error) throw error;
  return data;
}

export async function updateProduct(productId, productData) {
  const { data, error } = await supabase.from('products').update(productData).eq('id', productId).select().single();
  if (error) throw error;
  return data;
}

export async function deleteProduct(productId) {
  await supabase.from('cart_items').delete().eq('product_id', productId);
  await supabase.from('wishlist_items').delete().eq('product_id', productId);
  await supabase.from('order_items').delete().eq('product_id', productId);
  
  const { error } = await supabase.from('products').delete().eq('id', productId);
  if (error) throw error;
}

export { syncLocalDataToDb };
